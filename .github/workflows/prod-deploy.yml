name: Gaming Web App - Production

on:
  pull_request:
    branches:
      - production
    types:
      - closed

# Later, in the jobs section of your actions.yml file.
jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      BASE-IMAGE: josleke/esgc
      RELEASE-TAG: 4.1.0-Release

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2

      - name: Node version 20 Setup
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Generate Production Build
        run: |
          npm install caniuse-lite --legacy-peer-deps
          npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

#      - name: Set Release Tag Version
#        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}${RELEASE-TAG}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.BASE-IMAGE }}
          tags: ${{ env.RELEASE-TAG }}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to AWS - EC2
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PROD_PRIVATE_KEY }}
          HOSTNAME: ${{ vars.SSH_PROD_HOST }}
          USER_NAME: ${{ vars.USER_NAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          ssh -o "StrictHostKeyChecking no" -i private_key.pem ${USER_NAME}@${HOSTNAME} '
              # Now we have got the access of EC2 and will start the deployment.
              export LATEST=${{env.RELEASE-TAG}}
              echo "Latest version: $LATEST"
              docker-compose -f /app/gaming-app.yml up -d
              ' 
